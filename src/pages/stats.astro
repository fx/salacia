---
import { Layout } from '../components/Layout';
import '../styles/global.css';
import { sequelize } from '../lib/db/sequelize-connection.js';
import { MessagesService } from '../lib/services/messages.js';
import { VerticalBarChart } from '../components/VerticalBarChart';
import { HorizontalBarChart } from '../components/HorizontalBarChart';

// No helper functions needed - using components instead

// Load overall stats using service
let overall: Awaited<ReturnType<typeof MessagesService.getFilteredStats>> | null = null;
let errorMsg: string | null = null;

// Time-series (last 14 days) and top models
let series: Array<{ day: string; total: number; failed: number; avg_rt: number; tokens: number }> =
  [];
let topModels: Array<{ model: string; count: number }> = [];

try {
  overall = await MessagesService.getFilteredStats({});

  // Time series (Postgres)
  const [rows] = await sequelize.query(
    `
    SELECT 
      to_char(date_trunc('day', created_at), 'YYYY-MM-DD') as day,
      COUNT(*)::int as total,
      COALESCE(SUM(CASE WHEN error IS NOT NULL THEN 1 ELSE 0 END),0)::int as failed,
      COALESCE(AVG(response_time_ms),0)::int as avg_rt,
      COALESCE(SUM(total_tokens),0)::int as tokens
    FROM ai_interactions
    WHERE created_at >= NOW() - interval '14 days'
    GROUP BY 1
    ORDER BY 1
    `
  );
  series = rows as typeof series;

  // Top models
  const [models] = await sequelize.query(
    `
    SELECT model, COUNT(*)::int as count
    FROM ai_interactions
    GROUP BY model
    ORDER BY count DESC
    LIMIT 5
    `
  );
  topModels = models as typeof topModels;
} catch (err) {
  console.error('Failed to load stats', err);
  errorMsg = err instanceof Error ? err.message : 'Failed to load stats';
}

// Prepare vertical charts data (last 14 days totals and avg response time)
const dayTotals = series.map(r => r.total);
const dayAvgRt = series.map(r => r.avg_rt);

// Prepare x-axis labels (short day format)
const dayLabels = series.map(r => {
  const date = new Date(r.day);
  return date.getMonth() + 1 + '/' + date.getDate();
});

// Prepare horizontal chart data for daily stats
const dailyBars = series.map(r => ({
  label: r.day.substring(5), // MM-DD format
  value: r.total,
  failed: r.failed,
}));

// Prepare horizontal chart data for models
const modelBars = topModels.map(m => ({
  label: m.model.length > 20 ? m.model.substring(0, 20) + '...' : m.model,
  value: m.count,
}));

// Prepare model chart data for vertical chart
const modelCounts = topModels.map(m => m.count);
const modelLabels = topModels.map(m =>
  m.model.length > 10 ? m.model.substring(0, 10) + '...' : m.model
);
---

<html lang="en" data-webtui-theme="catppuccin">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Salacia - Stats</title>
    <meta name="description" content="Usage analytics and performance statistics" />
  </head>
  <body>
    <Layout client:idle>
      <div>
        {
          errorMsg ? (
            <div box-="square" variant-="red" role="alert">
              <strong>Error:</strong> {errorMsg}
            </div>
          ) : (
            <>
              <div box-="square">
                <h2>STATS OVERVIEW</h2>
                {overall ? (
                  <p>
                    <span is-="badge" variant-="surface0">
                      TOTAL
                    </span>
                    <span is-="badge" variant-="green">
                      {overall.totalMessages}
                    </span>
                    <span is-="badge" variant-="surface0">
                      SUCCESS
                    </span>
                    <span is-="badge" variant-="teal">
                      {overall.successfulMessages}
                    </span>
                    <span is-="badge" variant-="surface0">
                      FAILED
                    </span>
                    <span is-="badge" variant-="maroon">
                      {overall.failedMessages}
                    </span>
                    <span is-="badge" variant-="surface0">
                      RATE
                    </span>
                    <span is-="badge" variant-="yellow">
                      {overall.successRate}%
                    </span>
                    <span is-="badge" variant-="surface0">
                      AVG RT
                    </span>
                    <span is-="badge" variant-="blue">
                      {overall.averageResponseTime}ms
                    </span>
                    <span is-="badge" variant-="surface0">
                      TOKENS
                    </span>
                    <span is-="badge" variant-="peach">
                      {overall.totalTokens}
                    </span>
                    {overall.mostUsedModel && (
                      <>
                        <span is-="badge" variant-="surface0">
                          TOP MODEL
                        </span>
                        <span is-="badge" variant-="foreground0">
                          {overall.mostUsedModel}
                        </span>
                      </>
                    )}
                    <span is-="badge" variant-="surface0">
                      MODELS
                    </span>
                    <span is-="badge" variant-="foreground1">
                      {overall.uniqueModels}
                    </span>
                  </p>
                ) : (
                  <p>Loadingâ€¦</p>
                )}
              </div>

              <table width="100%">
                <tbody>
                  <tr>
                    <td>
                      {dailyBars.length === 0 ? (
                        <div box-="square">
                          <h3>LAST 14 DAYS</h3>
                          <p>No data available.</p>
                        </div>
                      ) : (
                        <HorizontalBarChart
                          client:load
                          data={dailyBars}
                          width={30}
                          title="LAST 14 DAYS"
                        />
                      )}
                    </td>
                    <td>
                      {dailyBars.length === 0 ? (
                        <div box-="square">
                          <h3>SUCCESS VS FAILED (STACKED)</h3>
                          <p>No data available.</p>
                        </div>
                      ) : (
                        <HorizontalBarChart
                          client:load
                          data={dailyBars}
                          width={30}
                          title="SUCCESS VS FAILED (STACKED)"
                          showFailedStack={true}
                        />
                      )}
                    </td>
                  </tr>
                  <tr>
                    <td>
                      {dayTotals.length === 0 ? (
                        <div box-="square">
                          <h3>DAILY TOTALS</h3>
                          <p>No data available.</p>
                        </div>
                      ) : (
                        <VerticalBarChart
                          client:load
                          data={dayTotals}
                          height={10}
                          xAxisLabels={dayLabels}
                          title="DAILY TOTALS"
                        />
                      )}
                    </td>
                    <td>
                      {dayAvgRt.length === 0 ? (
                        <div box-="square">
                          <h3>AVG RESPONSE TIME</h3>
                          <p>No data available.</p>
                        </div>
                      ) : (
                        <VerticalBarChart
                          client:load
                          data={dayAvgRt}
                          height={10}
                          xAxisLabels={dayLabels}
                          yAxisLabels={[
                            Math.max(...dayAvgRt) + 'ms',
                            Math.round(Math.max(...dayAvgRt) / 2) + 'ms',
                            '0ms',
                          ]}
                          title="AVG RESPONSE TIME"
                        />
                      )}
                    </td>
                  </tr>
                  <tr>
                    <td>
                      {modelCounts.length === 0 ? (
                        <div box-="square">
                          <h3>TOP MODELS</h3>
                          <p>No model data.</p>
                        </div>
                      ) : (
                        <VerticalBarChart
                          client:load
                          data={modelCounts}
                          height={8}
                          xAxisLabels={modelLabels}
                          title="TOP MODELS"
                        />
                      )}
                    </td>
                    <td>
                      {modelBars.length === 0 ? (
                        <div box-="square">
                          <h3>MODEL USAGE (HORIZONTAL)</h3>
                          <p>No model data.</p>
                        </div>
                      ) : (
                        <HorizontalBarChart
                          client:load
                          data={modelBars}
                          width={25}
                          title="MODEL USAGE (HORIZONTAL)"
                        />
                      )}
                    </td>
                  </tr>
                </tbody>
              </table>
            </>
          )
        }
      </div>
    </Layout>
  </body>
</html>
