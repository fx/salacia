---
import { Layout } from '../components/Layout';
import '../styles/global.css';
import { sequelize } from '../lib/db/sequelize-connection.js';
import { MessagesService } from '../lib/services/messages.js';
import { StatsDisplay } from '../components/StatsDisplay';

// Load 24-hour stats for the stats page (default view)
let overall: Awaited<ReturnType<typeof MessagesService.getFilteredStats>> | null = null;
let errorMsg: string | null = null;

// Time-series (last 14 days) and top models
let series: Array<{ day: string; total: number; failed: number; avg_rt: number; tokens: number }> =
  [];
let topModels: Array<{ model: string; count: number }> = [];

try {
  // Default to 24-hour stats for the stats page
  const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
  overall = await MessagesService.getFilteredStats({
    startDate: twentyFourHoursAgo
  });

  // Time series (Postgres)
  const [rows] = await sequelize.query(
    `
    SELECT 
      to_char(date_trunc('day', created_at), 'YYYY-MM-DD') as day,
      COUNT(*)::int as total,
      COALESCE(SUM(CASE WHEN error IS NOT NULL THEN 1 ELSE 0 END),0)::int as failed,
      COALESCE(AVG(response_time_ms),0)::int as avg_rt,
      COALESCE(SUM(total_tokens),0)::int as tokens
    FROM ai_interactions
    WHERE created_at >= NOW() - interval '14 days'
    GROUP BY 1
    ORDER BY 1
    `
  );
  series = rows as typeof series;

  // Top models (last 24 hours)
  const [models] = await sequelize.query(
    `
    SELECT model, COUNT(*)::int as count
    FROM ai_interactions
    WHERE created_at >= NOW() - interval '24 hours'
    GROUP BY model
    ORDER BY count DESC
    LIMIT 5
    `
  );
  topModels = models as typeof topModels;
} catch (err) {
  console.error('Failed to load stats', err);
  errorMsg = err instanceof Error ? err.message : 'Failed to load stats';
}
---

<html lang="en" data-webtui-theme="catppuccin">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Salacia - Stats</title>
    <meta name="description" content="Usage analytics and performance statistics" />
  </head>
  <body>
    <Layout client:idle>
      <StatsDisplay
        client:load
        initialOverall={overall}
        initialSeries={series}
        initialTopModels={topModels}
        initialError={errorMsg}
      />
    </Layout>
  </body>
</html>
