---
import Layout from '../layouts/Layout.astro';
export const prerender = false;
---

<Layout title="Messages Dashboard - Salacia">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <header class="mb-8">
      <h1 class="text-3xl font-bold mb-2">Messages Dashboard</h1>
      <p class="text-muted">View and manage AI conversation messages</p>
    </header>

    <!-- Main content -->
    <main>
      <div class="bg-card rounded-lg shadow-sm overflow-hidden">
        <!-- Table header -->
        <div class="bg-muted/5 border-b px-6 py-4">
          <h2 class="text-lg font-semibold">Recent Messages</h2>
          <p class="text-sm text-muted mt-1" id="table-subtitle">Loading message data...</p>
        </div>

        <!-- Table -->
        <div class="overflow-x-auto">
          <table class="w-full text-sm">
            <thead>
              <tr class="bg-muted/5 border-b">
                <th class="px-6 py-3 text-left font-medium text-xs uppercase tracking-wider">Time</th>
                <th class="px-6 py-3 text-left font-medium text-xs uppercase tracking-wider">Model</th>
                <th class="px-6 py-3 text-left font-medium text-xs uppercase tracking-wider">Provider</th>
                <th class="px-6 py-3 text-left font-medium text-xs uppercase tracking-wider">Tokens</th>
                <th class="px-6 py-3 text-left font-medium text-xs uppercase tracking-wider">Response Time</th>
                <th class="px-6 py-3 text-left font-medium text-xs uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody id="messages-tbody" class="bg-background divide-y divide-border">
              <!-- Messages will be loaded here -->
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div class="flex items-center justify-between px-6 py-4 bg-muted/5 border-t" id="pagination-controls" style="display: none;">
          <button 
            class="px-4 py-2 text-sm rounded-md bg-primary text-primary-foreground hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed"
            id="prev-button" 
            disabled
          >
            Previous
          </button>
          <span class="text-sm text-muted" id="pagination-info">Page 1 of 1</span>
          <button 
            class="px-4 py-2 text-sm rounded-md bg-primary text-primary-foreground hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed"
            id="next-button" 
            disabled
          >
            Next
          </button>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal for message details -->
  <dialog id="message-dialog" class="p-0 rounded-lg shadow-xl backdrop:bg-black/50 max-w-2xl w-full">
    <div class="bg-card">
      <div class="flex items-center justify-between p-6 border-b">
        <h3 class="text-lg font-semibold">Message Details</h3>
        <button 
          onclick="document.getElementById('message-dialog').close()"
          class="text-muted hover:text-foreground"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div id="message-details" class="p-6 space-y-4 max-h-[70vh] overflow-y-auto">
        <!-- Message details will be loaded here -->
      </div>
    </div>
  </dialog>

  <script is:inline>
    class MessagesUI {
      constructor() {
        this.currentPage = 1;
        this.pageSize = 20;
        this.totalPages = 1;
        this.isLoading = false;
        this.messages = [];
        this.eventSource = null;
        this.init();
      }

      init() {
        this.bindEvents();
        this.loadMessages();
        this.setupRealTimeUpdates();
      }

      bindEvents() {
        document.getElementById('prev-button').addEventListener('click', () => {
          if (this.currentPage > 1) {
            this.currentPage--;
            this.loadMessages();
          }
        });

        document.getElementById('next-button').addEventListener('click', () => {
          if (this.currentPage < this.totalPages) {
            this.currentPage++;
            this.loadMessages();
          }
        });
      }

      setupRealTimeUpdates() {
        // Set up Server-Sent Events for real-time updates
        this.eventSource = new EventSource('/api/messages/stream');
        
        this.eventSource.onmessage = (event) => {
          const message = JSON.parse(event.data);
          this.handleRealTimeUpdate(message);
        };

        this.eventSource.onerror = (error) => {
          console.error('SSE connection error:', error);
        };
      }

      handleRealTimeUpdate(message) {
        // If we're on the first page, prepend the new message
        if (this.currentPage === 1) {
          this.messages.unshift(message);
          if (this.messages.length > this.pageSize) {
            this.messages.pop();
          }
          this.renderMessages({ messages: this.messages, totalItems: this.messages.length });
        }
      }

      async loadMessages() {
        if (this.isLoading) return;

        this.isLoading = true;
        this.showLoading();

        try {
          const url = `/api/messages?page=${this.currentPage}&pageSize=${this.pageSize}`;
          const response = await fetch(url);

          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();
          this.messages = data.messages;
          this.renderMessages(data);
          this.updatePagination(data);
          this.showSuccess(data);
        } catch (error) {
          console.error('Failed to load messages:', error);
          this.showError(error.message);
        } finally {
          this.isLoading = false;
        }
      }

      showLoading() {
        const subtitle = document.getElementById('table-subtitle');
        const tbody = document.getElementById('messages-tbody');
        const pagination = document.getElementById('pagination-controls');

        subtitle.innerHTML = '<span class="animate-pulse">Loading messages...</span>';
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center py-12">
              <div class="flex items-center justify-center gap-2">
                <div class="animate-spin h-5 w-5 border-2 border-primary border-t-transparent rounded-full"></div>
                <span class="text-muted">Fetching message data...</span>
              </div>
            </td>
          </tr>
        `;
        pagination.style.display = 'none';
      }

      showError(message) {
        const subtitle = document.getElementById('table-subtitle');
        const tbody = document.getElementById('messages-tbody');
        const pagination = document.getElementById('pagination-controls');

        subtitle.innerHTML = '<span class="text-destructive">Error loading messages</span>';
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center py-12">
              <div class="text-destructive">
                <div class="text-lg font-semibold mb-1">Failed to load messages</div>
                <div class="text-sm text-muted">${message}</div>
              </div>
            </td>
          </tr>
        `;
        pagination.style.display = 'none';
      }

      showSuccess(data) {
        const subtitle = document.getElementById('table-subtitle');
        subtitle.innerHTML = `Showing ${data.messages.length} of ${data.totalItems} messages`;
      }

      renderMessages(data) {
        const tbody = document.getElementById('messages-tbody');

        if (!data.messages || data.messages.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="6" class="text-center py-12">
                <div class="text-muted">
                  <div class="text-lg font-semibold mb-1">No messages found</div>
                  <div class="text-sm">No AI interactions have been recorded yet</div>
                </div>
              </td>
            </tr>
          `;
          return;
        }

        tbody.innerHTML = data.messages
          .map(
            (message, index) => `
            <tr class="hover:bg-muted/5 cursor-pointer transition-colors" onclick="messagesUI.showMessageDetails(${index})">
              <td class="px-6 py-4">${this.formatDate(message.createdAt)}</td>
              <td class="px-6 py-4 font-medium">${message.model}</td>
              <td class="px-6 py-4 text-muted">${message.provider || 'Unknown'}</td>
              <td class="px-6 py-4">${this.formatTokens(message.totalTokens)}</td>
              <td class="px-6 py-4">${this.formatResponseTime(message.responseTime)}</td>
              <td class="px-6 py-4">${this.formatStatus(message.isSuccess, message.error)}</td>
            </tr>
          `
          )
          .join('');
      }

      showMessageDetails(index) {
        const message = this.messages[index];
        const dialog = document.getElementById('message-dialog');
        const details = document.getElementById('message-details');

        details.innerHTML = `
          <div class="space-y-4">
            <div>
              <h4 class="text-sm font-medium text-muted mb-1">Message ID</h4>
              <p class="font-mono text-sm">${message.id}</p>
            </div>
            
            <div>
              <h4 class="text-sm font-medium text-muted mb-1">Timestamp</h4>
              <p>${new Date(message.createdAt).toLocaleString()}</p>
            </div>

            <div class="grid grid-cols-2 gap-4">
              <div>
                <h4 class="text-sm font-medium text-muted mb-1">Model</h4>
                <p>${message.model}</p>
              </div>
              <div>
                <h4 class="text-sm font-medium text-muted mb-1">Provider</h4>
                <p>${message.provider || 'Unknown'}</p>
              </div>
            </div>

            <div class="grid grid-cols-3 gap-4">
              <div>
                <h4 class="text-sm font-medium text-muted mb-1">Total Tokens</h4>
                <p>${message.totalTokens || '—'}</p>
              </div>
              <div>
                <h4 class="text-sm font-medium text-muted mb-1">Response Time</h4>
                <p>${this.formatResponseTime(message.responseTime)}</p>
              </div>
              <div>
                <h4 class="text-sm font-medium text-muted mb-1">Status</h4>
                <p>${this.formatStatus(message.isSuccess, message.error)}</p>
              </div>
            </div>

            ${message.promptTemplate ? `
              <div>
                <h4 class="text-sm font-medium text-muted mb-1">Prompt Template</h4>
                <pre class="bg-muted/5 p-3 rounded-md text-xs overflow-x-auto"><code>${message.promptTemplate}</code></pre>
              </div>
            ` : ''}

            ${message.messages && message.messages.length > 0 ? `
              <div>
                <h4 class="text-sm font-medium text-muted mb-1">Messages</h4>
                <div class="space-y-2">
                  ${message.messages.map(msg => `
                    <div class="bg-muted/5 p-3 rounded-md">
                      <div class="text-xs font-medium text-muted mb-1">${msg.role}</div>
                      <div class="text-sm whitespace-pre-wrap">${msg.content}</div>
                    </div>
                  `).join('')}
                </div>
              </div>
            ` : ''}

            ${message.error ? `
              <div>
                <h4 class="text-sm font-medium text-destructive mb-1">Error</h4>
                <pre class="bg-destructive/5 p-3 rounded-md text-xs text-destructive overflow-x-auto"><code>${message.error}</code></pre>
              </div>
            ` : ''}
          </div>
        `;

        dialog.showModal();
      }

      updatePagination(data) {
        const pagination = document.getElementById('pagination-controls');
        const prevButton = document.getElementById('prev-button');
        const nextButton = document.getElementById('next-button');
        const paginationInfo = document.getElementById('pagination-info');

        this.totalPages = data.totalPages;

        prevButton.disabled = !data.hasPreviousPage;
        nextButton.disabled = !data.hasNextPage;
        paginationInfo.textContent = `Page ${data.currentPage} of ${data.totalPages}`;

        pagination.style.display = data.totalPages > 1 ? 'flex' : 'none';
      }

      formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleString('en-US', {
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          hour12: false,
        });
      }

      formatTokens(tokens) {
        if (!tokens) return '—';
        return tokens.toLocaleString();
      }

      formatResponseTime(responseTime) {
        if (!responseTime) return '—';
        return responseTime < 1000 ? `${responseTime}ms` : `${(responseTime / 1000).toFixed(1)}s`;
      }

      formatStatus(isSuccess, error) {
        if (isSuccess) {
          return '<span class="text-success">✓ Success</span>';
        } else {
          const errorText = error ? ` (${error.substring(0, 30)}...)` : '';
          return `<span class="text-destructive">✗ Error${errorText}</span>`;
        }
      }

      destroy() {
        if (this.eventSource) {
          this.eventSource.close();
        }
      }
    }

    // Initialize the UI when the page loads
    let messagesUI;
    document.addEventListener('DOMContentLoaded', () => {
      messagesUI = new MessagesUI();
    });

    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      if (messagesUI) {
        messagesUI.destroy();
      }
    });
  </script>
</Layout>