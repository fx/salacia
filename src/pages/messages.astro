---
/**
 * Messages page displaying AI interaction messages with filtering and pagination.
 *
 * This page provides a comprehensive interface for viewing and managing AI
 * interaction messages stored in the database. It uses server-side rendering
 * for initial data loading and React components for client-side interactivity.
 *
 * Features:
 * - Server-side rendered table with pagination
 * - Client-side filtering and sorting
 * - Responsive design with WebTUI styling
 * - Error handling and loading states
 * - Accessibility support
 */

import { Layout } from '../components/Layout';
import { MessagesLoadMore } from '../components/MessagesLoadMore';
import '../styles/global.css';

// Import the messages services for server-side data fetching
import { MessagesService } from '../lib/services/messages.js';
import { MessagesSequelizeService } from '../lib/services/messages-sequelize.js';
import type { MessagesFilterParams, MessageSort } from '../lib/types/messages.js';
import type { MessagesCursorPaginationParams } from '../lib/types/cursor.js';

// Default pagination parameters for initial page load
const defaultPagination: MessagesCursorPaginationParams = {
  limit: 20,
  sortBy: 'createdAt',
  sortDirection: 'desc',
};

const defaultFilters: MessagesFilterParams = {};
const defaultSort: MessageSort = {
  field: 'createdAt',
  direction: 'desc',
};

// Fetch initial data server-side for faster page load
let initialMessages: any;
let initialError = null;

try {
  const useSequelize = process.env.USE_SEQUELIZE === 'true';
  const response = useSequelize
    ? await MessagesSequelizeService.getMessagesWithCursor(defaultPagination, defaultFilters)
    : await MessagesService.getMessagesWithCursor(defaultPagination, defaultFilters);
  // Transform to simplified structure for frontend
  initialMessages = {
    items: response.data,
    hasMore: response.meta.hasMore,
    nextCursor: response.cursors.next,
    prevCursor: response.cursors.prev,
  };
} catch (error) {
  console.error('Failed to load initial messages:', error);
  initialError = error instanceof Error ? error.message : 'Failed to load messages';
  // Provide empty data structure for fallback
  initialMessages = {
    items: [],
    hasMore: false,
    nextCursor: undefined,
    prevCursor: undefined,
  };
}
---

<html lang="en" data-webtui-theme="catppuccin">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Salacia - Messages</title>
    <meta
      name="description"
      content="View and manage AI interaction messages with advanced filtering and search capabilities"
    />
  </head>
  <body>
    <Layout client:idle>
      <div>
        <!-- Messages interface component with Load More pattern -->
        <div>
          {
            initialError ? (
              <div box-="square" variant-="red" role="alert">
                <strong>Error:</strong> {initialError}
              </div>
            ) : (
              <MessagesLoadMore
                client:load
                initialMessages={initialMessages}
                initialFilters={defaultFilters}
                initialSort={defaultSort}
              />
            )
          }
        </div>
      </div>
    </Layout>
  </body>
</html>
